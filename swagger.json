{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "TEST API docs",
    "description": "API documentation for GoIT project 'TEST'. [Backend github repository](https://github.com/Tasha1003Natasha/team-project-back-end)"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "servers": [{"url": "https://team-project-back-end.herokuapp.com/api/"}],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Test",
      "description": "Test endpoints"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Email in use",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User authentication",
        "parameters": [],
        "requestBody": {
          "description": "Authentication's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email is wrong / Password is wrong",
            "content": {}
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "security": [{ "Bearer": [] }],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success / Successful operation",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "tags": ["Auth"],
        "summary": "Google authentication",
        "responses": {
          "200": {
            "description": "Successful operation (redirect to front-end with accessToken in query). Then use GET /user",
            "content": {}
          },
          "403": {
            "description": "Not registered or registered with postman",
            "content": {}
          }
        }
      }
    },
    "/auth/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user",
         "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
               "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/test/{type}": {
      "get": {
        "tags": ["Test"],
        "summary": "Get 12 random test  TYPES : tech | theory",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "schema": {
              "type": "string",
              "enum":[
                "tech",
                "theory"
              ]
            },
            "required": true,
            "description": "Test type tech or theory"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },
    "/test/result": {
      "post": {
        "tags": ["Test"],
        "summary": "Get result of test",
        "parameters": [],
         "requestBody": {
          "description": "Object of answers",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResultRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 6,
            "maxLength": 100
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      },
      "LoginRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email",
            "minLength": 3,
            "maxLength": 254
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123",
            "minLength": 6,
            "maxLength": 100
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "Session's access token (needed for all requests)",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1aWQiOiI1ZmMyMDg1YmQwOTM2NTI4MTA3Y2UyNzQiLCJzaWQiOiI1ZmMyZDJmY2UxZDIwNTA2NzAyYmRkMjIiLCJpYXQiOjE2MDY2MDM1MTYsImV4cCI6MTYwNjYwNzExNn0.rJ_QjU4KvA76H96RHsvOBChK0Vjbd0NmqjMxdQVJIXA"
          },
          "user":{
            "type":"object",
            "properties":{
              "email":{
                "type": "string",
                "description": "User's email",
                "example": "example@mail.com"
              },
              "_id":{
                "type": "string",
                "description": "User's id",
                "example": "2123981029481029840"
              }
            }
          }
        }
      },
      "TestResponse": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "description": "question ID",
              "example": "635937f59d8216968f25ff87"
            },
            "answer": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "array of answers",
              "example": "['Who uses the product and which features are important to users, and which are secondary', 'How users solve problems and problems, and who they are', 'How you can attract more users; how to keep current ones and how to bring them to payment', 'Why users abandon the product (it may be in an incâ€¦hnical bugs, lack of necessary functions or cost)', 'All options are correct', 'All options are incorrect']"
            },
            "question":{
               "type": "string",
               "description": "question",   
                "example": "Product Owner controls"
            },
            "type":{
               "type": "string",
               "enum":["tech","theory"],
               "description": "type of question",   
                "example": "tech"
            }
          }
        }
      },
      "ResultRequest": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "userAnswer":{
               "type": "string",
               "description": "User answer",   
                "example": "Some user answer"
            },
             "_id": {
              "type": "string",
              "description": "question ID",
              "example": "635937f59d8216968f25ff87"
            }
          }
        }
      },
      "ResultResponse": {
        "type": "object",
        "properties": {
          "correct": {
            "type": "integer",
            "description": "Number of correct answers",
            "example": 7
          },
          "incorrect": {
            "type": "integer",
            "description": "Number of incorrect answers",
            "example": 5
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "id": {
            "type": "string",
            "description": "User's id",
            "example": "507f1f77bcf86cd799439011"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}